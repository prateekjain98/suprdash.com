---
import { markdownify } from "@/lib/utils/textConverter";
import ImageMod from "@/components/ImageMod.astro";
import { Icon } from "astro-icon/components";
import type { CollectionEntry } from "astro:content";

type WorkItem = {
  title: string;
  image: string;
  description: string;
  tags: string[];
  url: string;
};

type Props = {
  title: string;
  description: string;
  works: WorkItem[];
};

const { title, description, works } = Astro.props;
---

<section class="section">
  <!-- Custom cursor element -->
  <div id="custom-cursor" class="custom-cursor">
    <div class="cursor-circle">
      <span>View</span>
    </div>
  </div>

  <div class="container">
    <div class="row justify-center">
      <div class="col-10 xl:col-6">
        <h2
          set:html={markdownify(title)}
          class="mb-5 text-center text-balance"
          data-aos="fade-up-sm"
        />
        <p
          set:html={markdownify(description)}
          class="mb-12 text-center text-balance"
          data-aos="fade-up-sm"
        />
      </div>
    </div>
    
    <div class="row g-5 justify-center">
      {
        works.map((work, index) => (
          <div 
            class="col-12 md:col-6 lg:col-4"
            data-aos="fade-up-sm"
            data-aos-delay={50 + index * 50}
          >
            <a 
              href={work.url} 
              target="_blank" 
              rel="noopener noreferrer" 
              class="block h-full"
            >
              <div class="work-card cursor-trigger bg-gradient border border-border rounded-3xl overflow-hidden transition-all duration-300 hover:scale-[1.02] h-full flex flex-col">
                <div class="relative overflow-hidden aspect-video">
                  <ImageMod
                    src={work.image}
                    alt={work.title}
                    width={500}
                    height={280}
                    class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
                    format="webp"
                  />
                </div>
                
                <div class="p-6 flex flex-col flex-grow bg-gradient">
                  <h4 class="mb-3 text-xl font-semibold">{work.title}</h4>
                  <p class="text-text/80 mb-5">{work.description}</p>
                  
                  <div class="mt-auto flex flex-wrap gap-2">
                    {work.tags.map((tag) => (
                      <span class="text-xs bg-tertiary/10 text-tertiary px-3 py-1 rounded-full">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </a>
          </div>
        ))
      }
    </div>
    
    <div class="flex justify-center mt-14" data-aos="fade-up-sm">
      <button
        onclick="if(window.$crisp)window.$crisp.push(['do', 'chat:open'])"
        class="btn btn-primary"
      >
        <span>Start Your Project</span>
      </button>
    </div>
  </div>
  
  <div
    class="absolute w-full lg:w-[70%] aspect-auto top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 -z-20 opacity-30"
  >
    <svg
      viewBox="0 0 1050 499"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      data-aos="zoom-in-sm"
    >
      <path
        d="M45.8097 1.5H1005.53C1017.21 1.5 1021.45 16.9137 1011.4 22.8857L735.529 186.849C733.751 187.906 731.722 188.463 729.654 188.463H337.297C335.322 188.463 333.381 187.955 331.659 186.986L40.1716 23.0231C29.8574 17.2213 33.9756 1.5 45.8097 1.5Z"
        stroke="#462E8E"></path>
      <path d="M842.346 1L653 188.666" stroke="#462E8E"></path>
      <path d="M689.192 1L607 188.332" stroke="#462E8E"></path>
      <path d="M578.802 1V188.332" stroke="#462E8E"></path>
      <path d="M469.406 1L537.5 188.332" stroke="#462E8E"></path>
      <path d="M320.23 1L500.5 189" stroke="#462E8E"></path>
      <path d="M167.077 1L459 188.666" stroke="#462E8E"></path>
      <path d="M105.418 58.1194H954.726" stroke="#462E8E"></path>
      <path d="M206.857 116.568H857.264" stroke="#462E8E"></path>
    </svg>
  </div>
</section>

<style>
  .work-card {
    position: relative;
    border: 1px solid var(--border-color, rgba(255, 255, 255, 0.1));
    transition: border-color 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease;
  }

  .work-card:hover {
    box-shadow: 0 10px 30px -10px rgba(117, 67, 255, 0.2);
    border-color: rgba(117, 67, 255, 0.3);
  }
  
  /* Show the overlay when hovering the entire card */
  .work-card:hover .overlay {
    opacity: 1;
  }

  .work-card::before {
    content: "";
    position: absolute;
    inset: -1px;
    z-index: -1;
    border-radius: inherit;
    background: linear-gradient(90deg, #7543FF, #C0C0C0, #7543FF);
    background-size: 200% 200%;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .work-card:hover::before {
    opacity: 0.3;
    animation: gradientShift 5s ease infinite;
  }

  /* Custom cursor styles */
  .cursor-trigger {
    cursor: none !important;
  }

  .custom-cursor {
    position: fixed;
    width: 80px;
    height: 80px;
    pointer-events: none;
    z-index: 9999;
    opacity: 0;
    transform: translate(-50%, -50%);
    transition: opacity 0.3s ease, transform 0.1s ease;
  }

  .custom-cursor.active {
    opacity: 1;
  }

  .cursor-circle {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, rgba(117, 67, 255, 0.8), rgba(45, 13, 117, 0.8));
    backdrop-filter: blur(4px);
    color: white;
    font-weight: 600;
    transform: scale(0.8);
    transition: transform 0.3s cubic-bezier(0.16, 1, 0.3, 1);
    box-shadow: 0 0 20px rgba(117, 67, 255, 0.4);
    letter-spacing: 0.5px;
    text-transform: uppercase;
    font-size: 14px;
    position: relative;
    z-index: 1;
  }

  .cursor-circle::before {
    content: "";
    position: absolute;
    inset: -2px;
    border-radius: inherit;
    background: linear-gradient(90deg, #7543FF, #C0C0C0, #7543FF, #AB83FF, #7543FF);
    background-size: 400% 400%;
    z-index: -1;
    animation: gradientBorder 4s linear infinite;
    opacity: 0.7;
  }

  .custom-cursor.hover .cursor-circle {
    transform: scale(1);
  }

  @keyframes gradientBorder {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  @keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const cursor = document.getElementById("custom-cursor");
    const triggers = document.querySelectorAll(".cursor-trigger");

    if (!cursor) return;

    // Update cursor position
    document.addEventListener("mousemove", (e) => {
      cursor.style.left = `${e.clientX}px`;
      cursor.style.top = `${e.clientY}px`;
    });

    // Show/hide custom cursor
    triggers.forEach((trigger) => {
      trigger.addEventListener("mouseenter", () => {
        cursor.classList.add("active");
        cursor.classList.add("hover");
      });

      trigger.addEventListener("mouseleave", () => {
        cursor.classList.remove("active");
        cursor.classList.remove("hover");
      });

      // Additional effect when moving
      trigger.addEventListener("mousemove", () => {
        cursor.classList.add("active");
      });
    });

    // Add slight delay to cursor for smoothness
    let mouseX = 0;
    let mouseY = 0;
    let cursorX = 0;
    let cursorY = 0;
    
    function animate() {
      const distX = mouseX - cursorX;
      const distY = mouseY - cursorY;
      
      cursorX += distX * 0.1;
      cursorY += distY * 0.1;
      
      requestAnimationFrame(animate);
    }
    
    animate();
  });
</script>