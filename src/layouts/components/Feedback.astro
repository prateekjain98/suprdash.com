---
import { getEntry } from "astro:content";
import ImageMod from "./ImageMod.astro";
import DynamicIcon from "@/helpers/DynamicIcon";
import { markdownify } from "@/lib/utils/textConverter";
import type { CollectionEntry } from "astro:content";

const customerStory = (await getEntry(
  "customerStory",
  "-index"
)) as CollectionEntry<"customerStory">;
const { feedback, story } = customerStory.data;
---

<section class="section">
  <div class="container">
    <h2 set:html={markdownify(feedback.title)} class="mb-5 text-center" />
    <p set:html={markdownify(feedback.content)} class="mb-14 text-center" />
  </div>
  <div class="overflow-hidden relative">
    <div
      class="absolute bg-body z-20 -left-20 xl:-left-60 w-3/12 blur-[120px] h-full"
    >
    </div>
    <div
      class="absolute bg-body z-20 -right-20 xl:-right-60 w-3/12 blur-[120px] h-full"
    >
    </div>
    <div
      class="inf-slider"
      data-inf-scroll-speed="60"
      data-inf-direction="normal"
      data-inf-slide-pause-on-hover="false"
      data-aos="fade-left-sm"
    >
      <div class="inf-slide-track space-x-5 h-full">
        {
          story.stories.map((s: any) => (
            <div class="inf-slide w-[250px] md:w-[400px]">
              <div class="bg-gradient rounded-2xl p-5">
                <div class="flex items-center justify-between mb-4">
                  <div class="flex items-center">
                    <div class="rounded-full overflow-hidden mr-3">
                      <ImageMod
                        class="object-cover"
                        src={s.customerAvatar}
                        alt="customer image"
                        height={40}
                        width={40}
                        format="webp"
                      />
                    </div>
                    <div>
                      <p
                        class="font-medium text-text-light text-base"
                        set:html={s.customerName}
                      />
                      <p class="text-xs" set:html={s.customerDesignation} />
                    </div>
                  </div>
                  <a href={s.social.url} class="text-text-light">
                    <DynamicIcon
                      className="inline-block rounded-full w-8 size-full bg-border/80 p-2"
                      icon={s.social.icon}
                    />
                  </a>
                </div>

                <hr class="border-t-2 border-primary my-5" />

                <p class="text-base" set:html={s.story} />
              </div>
            </div>
          ))
        }
      </div>
    </div>
    <div
      class="inf-slider"
      data-inf-scroll-speed="60"
      data-inf-direction="reverse"
      data-inf-slide-pause-on-hover="false"
      data-aos="fade-right-sm"
    >
      <div class="inf-slide-track space-x-5 h-full">
        {
          story.stories.map((s: any) => (
            <div class="inf-slide w-[250px] md:w-[400px]">
              <div class="bg-gradient rounded-2xl p-5">
                <div class="flex items-center justify-between mb-4">
                  <div class="flex items-center">
                    <div class="rounded-full overflow-hidden mr-3">
                      <ImageMod
                        class="object-cover"
                        src={s.customerAvatar}
                        alt="customer image"
                        height={40}
                        width={40}
                        format="webp"
                      />
                    </div>
                    <div>
                      <p
                        class="font-medium text-text-light text-base"
                        set:html={s.customerName}
                      />
                      <p class="text-xs" set:html={s.customerDesignation} />
                    </div>
                  </div>
                  <a href={s.social.url} class="text-text-light">
                    <DynamicIcon
                      className="inline-block rounded-full w-8 size-full bg-border/80 p-2"
                      icon={s.social.icon}
                    />
                  </a>
                </div>

                <hr class="border-t-2 border-primary my-5" />

                <p class="text-base" set:html={s.story} />
              </div>
            </div>
          ))
        }
      </div>
    </div>
    <div
      class="inf-slider"
      data-inf-scroll-speed="60"
      data-inf-direction="normal"
      data-inf-slide-pause-on-hover="false"
      data-aos="fade-left-sm"
    >
      <div class="inf-slide-track space-x-5 h-full">
        {
          story.stories.map((s: any) => (
            <div class="inf-slide w-[250px] md:w-[400px]">
              <div class="bg-gradient rounded-2xl p-5">
                <div class="flex items-center justify-between mb-4">
                  <div class="flex items-center">
                    <div class="rounded-full overflow-hidden mr-3">
                      <ImageMod
                        class="object-cover"
                        src={s.customerAvatar}
                        alt="customer image"
                        height={40}
                        width={40}
                        format="webp"
                      />
                    </div>
                    <div>
                      <p
                        class="font-medium text-text-light text-base"
                        set:html={s.customerName}
                      />
                      <p class="text-xs" set:html={s.customerDesignation} />
                    </div>
                  </div>
                  <a href={s.social.url} class="text-text-light">
                    <DynamicIcon
                      className="inline-block rounded-full w-8 size-full bg-border/80 p-2"
                      icon={s.social.icon}
                    />
                  </a>
                </div>

                <hr class="border-t-2 border-primary my-5" />

                <p class="text-base" set:html={s.story} />
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener("astro:page-load", () => {
    interface SliderOptions {
      scrollSpeed: string;
      direction: "normal" | "reverse";
      pauseOnHover: boolean;
    }

    const sliders: NodeListOf<HTMLElement> =
      document.querySelectorAll(".inf-slider");

    sliders.forEach((slider: HTMLElement) => {
      const options: SliderOptions = {
        scrollSpeed: slider.dataset.infScrollSpeed || "100", // Default scroll speed 100px/s
        direction: (slider.dataset.infDirection === "reverse"
          ? "reverse"
          : "normal") as "normal" | "reverse",
        pauseOnHover: slider.dataset.infSlidePauseOnHover === "true",
      };

      const track: HTMLElement | null =
        slider.querySelector(".inf-slide-track");
      if (!track) return;

      const slides: HTMLCollectionOf<HTMLElement> =
        track.getElementsByClassName(
          "inf-slide"
        ) as HTMLCollectionOf<HTMLElement>;
      const numSlides: number = slides.length;

      if (numSlides === 0) return;

      // Calculate total width of all slides
      let totalWidth = 0;
      const slideWidths: number[] = [];

      Array.from(slides).forEach((slide: HTMLElement) => {
        const width = slide.offsetWidth;
        slideWidths.push(width);
        totalWidth += width;
      });

      // Clone slides
      Array.from(slides).forEach((slide: HTMLElement, index: number) => {
        const clone: Node = slide.cloneNode(true);
        (clone as HTMLElement).style.width = `${slideWidths[index]}px`; // Set explicit width on clones
        track.appendChild(clone);
      });

      // Set track width to accommodate all slides (original + cloned)
      track.style.width = `${totalWidth * 2}px`;

      // Calculate animation duration based on scrollSpeed (pixels per second)
      const scrollSpeed: number = parseFloat(options.scrollSpeed);
      const animationDuration: number = (totalWidth * 2) / scrollSpeed; // time = distance / speed

      // Create a custom property with all slide widths
      const slideWidthsString = slideWidths.join("px ") + "px";
      slider.style.setProperty("--slide-widths", slideWidthsString);

      // Set the animation with calculated duration
      const animationName = `inf-scroll${options.direction === "reverse" ? "-reverse" : ""}`;
      track.style.animation = `${animationName} ${animationDuration}s linear infinite`;

      // Add pause on hover functionality
      if (options.pauseOnHover) {
        slider.addEventListener("mouseenter", () => {
          track.style.animationPlayState = "paused";
        });

        slider.addEventListener("mouseleave", () => {
          track.style.animationPlayState = "running";
        });
      }
    });
  });
</script>
